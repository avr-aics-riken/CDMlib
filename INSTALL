/*
 * CDMlib - Cartesian Data Management library
 *
 * Copyright (c) 2013-2015 Advanced Institute for Computational Science, RIKEN.
 * All rights reserved.
 *
 */


SOFTWARE REQUIREMENT
====================

- MPI library
- Text parsing library
- CPM library




HOW TO COMPILE
==============

1) with configure

$ export FFV_HOME=hogehoge
$ cd BUILD_DIR
$ ../configure [options]
$ make
$ make install



Configure options:

 --host=hostname
    Specify in case of cross-compilation.

 --prefix=INSTALL_DIR
    Specify a directory to be installed. The default directory is /usr/local/CDMlib.

 --with-MPI=(yes|no)
    Specify to compile parallel module. If you install frm on a login node of the K-
    Computer, specify --with-MPI=no, --install-frm=yes. Default is yes. If yes, para-
    llel file converter is installed.

 --with-example=(no|yes)
    Turn on to build examples. Default setting is 'no'.

 --with-nc=netCDF4_dir
    Specify the directory path that netCDF4 library is installed when you use netCDF4
    file format.

 --with-ompi=OPENMPI_DIR
    If the OpenMPI library is used, specify the directory path that OpenMPI library is
    installed. If a wrapper compiler, e.g., mpicxx, is used to compile, this options
    can be eliminated.

 --with-parser=TEXTPARSER_PATH
    Specify the directory path that TextParser library is installed.

 --with-cpm=CPM_PATH
    Specify the directory path that CPM library is installed. CDMlib itself doesn't need
    CPMlib, but file converter depends on. If not specified this option, file converter
    is not compiled.

 --with-frm=(no|yes)
    Install frm tool. In case of cross-compilation, this option is invalid and frm is not
    installed. In case of native compile environment, on the other hand, '--with-frm=yes'
    indicates that frm is installed at the same time as CDMlib is compiled. Default is no.


 CXX=CXX_COMPILER
   Specify C++ compiler or a wrapper compiler for MPI. If a wrapper compiler is specified,
   set string as CXX=mpiCC without directory prefix. To do so, please set path before
   compilation.

 CXXFLAGS=CXX_OPTIONS
    Specify C++ compiler options.

 F90=FORTRAN90_COMPILER
    Specify fortran90 compiler.

 F90FLAGS=FORTRAN90_OPTIONS
    Specify fortran90 compiler options.




2) Configure Examples

# INTEL compiler

## Combination of Intel compiler and OpenMPI.
$ ../configure --with-ompi=/usr/local/opt/openmpi \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               CXX=icpc \
               CXXFLAGS="-O3 -Wall" \
               F90=ifort \
               F90FLAGS=-O3

## MPI by a wrapper, /w frm and examples
$ ../configure --prefix=${FFV_HOME}/CDMlib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               --with-frm=yes \
               CXX=mpicxx \
               CXXFLAGS=-O3 \
               F90=mpif90 \
               F90FLAGS=-O3 \
               --with-example=yes

## /w NetCFD support, file converter and frm
$ ../configure --prefix=${FFV_HOME}/CDMlib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               --with-frm=yes \
               --with-nc=/usr/local/NetCDF \
               CXX=mpicxx \
               CXXFLAGS=-O3 \
               F90=mpif90 \
               F90FLAGS=-O3 \
               --with-example=yes



# GNU compiler

## /w file converter and frm
$ ../configure --prefix=${FFV_HOME}/CDMlib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               --with-frm=yes \
               CXX=mpicxx \
               CXXFLAGS=-O3 \
               F90=mpif90 \
               F90FLAGS=-O3 \
               --with-example=yes

## /w NetCFD support, file converter and frm
$ ../configure --prefix=${FFV_HOME}/CDMlib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               --with-frm=yes \
               --with-nc=/usr/local/NetCDF \
               CXX=mpicxx \
               CXXFLAGS=-O3 \
               F90=mpif90 \
               F90FLAGS=-O3 \
               --with-example=yes



# FUJITSU compiler / FX, K computer
$ ../configure --prefix=${FFV_HOME}/CDMlib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-cpm=${FFV_HOME}/CPMlib \
               --host=sparc64-unknown-linux-gnu \
               CXX=mpiFCCpx \
               CXXFLAGS=-Kfast \
               F90=mpifrtpx \
               F90FLAGS=-Kfast




3) Hand compile

If a provided configure does not work, use Makefile_hand to build this library. At first,
edit MACRO to tell your machine environment.




4) Compilation of staging tool

When you install staging tool onto a login node with cross-compiling environment, the tool
must be compiled by native compiler on the login node. If the front-end login node does not
have MPI library, specify —with-MPI=no option. Here is an example for the K-computer.

 $ ../configure --prefix=hogehoge \
                -—with-MPI=no \
                --with-parser=hoge \
                --with-cpm=foo \
                --with-frm=yes \
                CXX=g++ \
                FC=gfortran

Note that TextParser library to be liked also must be compiled for native environment.



5) NetCDF support
Before compiling NetCDF, we must build HDF5.
HDF5 allows to use the options of several compression, zip, szip, etc.
Since CDMlib manage multiple files, NetCDF and HDF5 may compile in serial version.

SZIP:
$ cat config_szip.sh
#!/bin/sh
export CC=gcc
export CFLAGS=-O3
#
./configure --prefix=$1

$ cd szip-x.x
$ config_szip.sh /usr/local/SZIP
$ make
$ sudo make install


HDF5:
$ cat config_hdf5.sh
#!/bin/sh
export CC=gcc-5
export CFLAGS=-O3
export FC=gfortran
export FCFLAGS=-O3
#
./configure --prefix=$1 --enable-fortran --enable-cxx --with-zlib=/usr/bin --with-szip=/usr/local/SZIP

$ cd hdf5-x.x.x
$ config_hdf5.sh /usr/local/HDF5
$ make
$ sudo make install


NetCDF:
$ cat config_netcdf.sh
#!/bin/sh
export CC=gcc-5
export CFLAGS=-O3
export CXX=g++-5
export CXXFLAGS=-O3
export FC=gfortran
export FCFLAGS=-O3
export CPPFLAGS=-I/usr/local/HDF5/include
export LDFLAGS=-L/usr/local/HDF5/lib
#
./configure --prefix=$1

$ cd netcdf-x.x.x
$ config_netcdf.sh /usr/local/NetCDF
$ make
$ sudo make install




